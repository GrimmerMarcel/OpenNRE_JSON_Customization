{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Initialisierung der Embeddingmatrizen\n",
    "\n",
    "Initialisierung entweder mit gleichen oder zufälligen Werten"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Einlesen der durch \"OpenNRE_filterRelevantWords\" abgeleiteten Wörter\n",
    "import json\n",
    "with open('rel_word_vec.json') as json_file: \n",
    "    wordvec = json.load(json_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "for worditem in wordvec:\n",
    "    ##### Block kommentieren falls zufällige Werte erwünscht\n",
    "    #worditem['vec'][0:] = [0.10001]*50 \n",
    "    ####\n",
    "    randNumb = []\n",
    "    ####### Block kommentieren falls einheitliche Werte gewünscht\n",
    "    for i in range(200):\n",
    "        randNumb.append(float(\"{0:.5f}\".format(random.uniform(-1, 1))))\n",
    "    worditem['vec'][0:] = randNumb\n",
    "    #######"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Speichere alternativ initiierte Embeddingmatrix\n",
    "with open('rel_word_vec_rand_200.json', 'w') as f:\n",
    "    for item in wordvec:\n",
    "        json.dump(item,f)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
